@using Bunit
@using Bunit.Rendering;
@using Microsoft.AspNetCore.Components.Forms
@using NUnit.Framework;
@using Microsoft.AspNetCore.Components;
@using Microsoft.Extensions.DependencyInjection;
@using BlazorDemo.Model;
@using BlazorDemo.Components;
@inherits Bunit.TestContext;

@code {

  [Test]
  public void TestMyInputComponent()
  {
    var testModel = new Person();
    var editCtx = new EditContext(testModel);
    var cut = Render(
      @<div>
        <EditForm EditContext="editCtx">
            <MyCustomInputComponent Label="Firstname" @bind-Value="testModel.Firstname"></MyCustomInputComponent>
        </EditForm>
        <p>@testModel.Firstname</p>
      </div>
      );

    var inputElement = cut.Find("input");
    inputElement.Input("John");

    // Passes
    Assert.That(testModel.Firstname, Is.EqualTo("John"));
    
    var pElement = cut.Find("p");
    // Fails
    pElement.MarkupMatches("<p>John</p>");
  }

  [Test]
  public void TestMyInputComponentWithWrapper()
  {
    var testModel = new Person();
    var editCtx = new EditContext(testModel);
    var cut = Render(
    @<TestWrapperComponent>
      <EditForm EditContext="editCtx">
        <MyCustomInputComponent Label="Firstname" @bind-Value="testModel.Firstname"></MyCustomInputComponent>
      </EditForm>
      <p>@testModel.Firstname</p>
    </TestWrapperComponent>
    );

    var inputElement = cut.Find("input");
    inputElement.Input("John");

    // Get the component and call a method that invokes "StateHasChanged".
    var renderedComponent = (IRenderedComponent<IComponent>)cut;
    var wrapperComponent = renderedComponent.FindComponent<TestWrapperComponent>();
    wrapperComponent.InvokeAsync(() => wrapperComponent.Instance.Refresh());

    // Passes.
    Assert.That(testModel.Firstname, Is.EqualTo("John"));

    var pElement = cut.Find("p");
    // Passes.
    pElement.MarkupMatches("<p>John</p>");
  }

}
